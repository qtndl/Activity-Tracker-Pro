import asyncio
from datetime import datetime, timedelta
from typing import Dict, List
from aiogram import Bot
from sqlalchemy import select
from database.database import AsyncSessionLocal
from database.models import Employee, Message, Notification
from .settings_manager import settings_manager
from web.services.statistics_service import EmployeeStats
import logging
import pytz

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduled_tasks: Dict[int, List[asyncio.Task]] = {}  # message_id (DBMessage.id): [tasks]
    
    async def schedule_warnings_for_message(self, message_id: int, employee_id: int, chat_id: int):
        delay_data = await settings_manager.get_notification_delays()
        # print(f'delay_data={delay_data[0]}')
        if delay_data[0] == 'False':
            next_working_hour = await self.get_next_9am_moscow_utc()
            async with AsyncSessionLocal() as session:
                db_message = await session.execute(select(Message).where(Message.id == message_id))
                db_msg = db_message.scalar_one_or_none()
                if db_msg:
                    db_msg.received_at = next_working_hour
                    await session.commit()

        delays = delay_data[1:]
        # print(f'delays={delays}')
        types = ["warning_15", "warning_30", "warning_60"]
        logger.info(f"[NOTIFY] –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: DBMessage={message_id}, Employee={employee_id}, Delays={delays}m, Types={types}")
        if not await settings_manager.notifications_enabled():
            logger.info("[NOTIFY] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
        for delay, ntype in zip(delays, types):
            # print(f'delay={delay}')
            await self.schedule_warning(message_id, employee_id, chat_id, delay, ntype)
    
    async def schedule_warning(self, message_id: int, employee_id: int, chat_id: int, delay_minutes: int, notification_type: str):
        task = asyncio.create_task(
            self._send_delayed_warning(message_id, employee_id, chat_id, delay_minutes, notification_type)
        )
        if message_id not in self.scheduled_tasks:
            self.scheduled_tasks[message_id] = []
        self.scheduled_tasks[message_id].append(task)
    
    async def _send_delayed_warning(self, message_id: int, employee_id: int, chat_id: int, delay_minutes: int, notification_type: str):
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ DBMessage –∏ Employee
        print(f'delay_minutes = {delay_minutes}')
        if delay_minutes == 1:
            logger.info(f"[NOTIFY] –û–∂–∏–¥–∞–Ω–∏–µ: DBMessage={message_id}, Employee={employee_id}, Delays=[1m, 2m, 60m], Types=[warning_15, warning_30, warning_60]")
        try:
            await asyncio.sleep(delay_minutes)
            async with AsyncSessionLocal() as session:
                result = await session.execute(select(Message).where(Message.id == message_id))
                message = result.scalar_one_or_none()
                if message and not message.responded_at and not message.is_deferred:
                    emp_result = await session.execute(select(Employee).where(Employee.id == employee_id))
                    employee = emp_result.scalar_one_or_none()
                    if employee and employee.is_active:
                        warning_text = await self._get_warning_text(delay_minutes, message)
                        try:
                            await self.bot.send_message(employee.telegram_id, warning_text, parse_mode="HTML")
                            notification = Notification(employee_id=employee_id, notification_type=notification_type, message_id=message_id)
                            session.add(notification)
                            await session.commit()
                            logger.info(f"[NOTIFY] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: DBMessage={message_id}, Employee={employee_id}, Type={notification_type}")
                        except Exception as e:
                            logger.error(f"[NOTIFY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: DBMessage={message_id}, Employee={employee_id}, Type={notification_type}: {e}")
                    else:
                        logger.info(f"[NOTIFY] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: Employee={employee_id}")
                else:
                    logger.info(f"[NOTIFY] –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: DBMessage={message_id}")
        except asyncio.CancelledError:
            logger.info(f"[NOTIFY] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: DBMessage={message_id}, Employee={employee_id}, Type={notification_type}")
        finally:
            if message_id in self.scheduled_tasks:
                self.scheduled_tasks[message_id] = [t for t in self.scheduled_tasks[message_id] if not t.done()]
                if not self.scheduled_tasks[message_id]:
                    del self.scheduled_tasks[message_id]
    
    async def cancel_notifications(self, message_id: int):
        logger.info(f"[NOTIFY] –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: DBMessage={message_id}")
        if message_id in self.scheduled_tasks:
            for task in self.scheduled_tasks[message_id]:
                if not task.done():
                    task.cancel()
        else:
            logger.info(f"[NOTIFY] –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ–Ω—ã: DBMessage={message_id}")
    
    async def _get_warning_text(self, delay_minutes, message):
        chat_id = message.chat_id if hasattr(message, 'chat_id') else message.chat.id
        abs_chat_id = abs(chat_id)
        chat_username = getattr(message, 'chat_username', None)
        chat_link = None
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ message.chat
        try:
            logger.info(f"[NOTIFY-DEBUG] message.chat: {getattr(message, 'chat', None)}")
        except Exception as e:
            logger.warning(f"[NOTIFY-DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å message.chat: {e}")
        if not chat_username and hasattr(self.bot, 'get_chat'):
            try:
                chat = await self.bot.get_chat(chat_id)
                logger.info(f"[NOTIFY-DEBUG] self.bot.get_chat({chat_id}): {chat}")
                chat_username = getattr(chat, 'username', None)
                if chat_username:
                    logger.info(f"[NOTIFY-DEBUG] –ü–æ–ª—É—á–µ–Ω username —á–∞—Ç–∞: {chat_username}")
                else:
                    logger.info(f"[NOTIFY-DEBUG] Username —á–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                logger.warning(f"[NOTIFY-DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ self.bot.get_chat({chat_id}): {e}")
                chat_username = None
        if chat_username:
            chat_link = f"https://t.me/{chat_username}"
            chat_line = f"–ß–∞—Ç: <a href='{chat_link}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç</a>"
        else:
            # –í–°–ï–ì–î–ê –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é invite_link —á–µ—Ä–µ–∑ API
            try:
                invite_link = await self.bot.export_chat_invite_link(chat_id)
            except Exception as e:
                logger.warning(f"[NOTIFY] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å invite-—Å—Å—ã–ª–∫—É –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
                invite_link = None
            if invite_link:
                chat_line = f"–ß–∞—Ç: <a href='{invite_link}'>–†–∞–±–æ—á–∏–π —á–∞—Ç</a>"
            else:
                chat_line = f"–ß–∞—Ç: <code>{chat_id}</code> (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
        client_profile = None
        if getattr(message, 'client_username', None):
            client_profile = f"<a href='https://t.me/{message.client_username}'>@{message.client_username}</a> (ID: {message.client_telegram_id})"
        else:
            client_profile = f"ID –∫–ª–∏–µ–Ω—Ç–∞: <code>{message.client_telegram_id}</code>"

        return (
            f"‚ö†Ô∏è <b>–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞!</b>\n"
            f"\n"
            f"{chat_line}\n"
            f"{client_profile}\n"
            f"–¢–µ–∫—Å—Ç: {message.message_text[:50]}...\n"
            f"\n"
            f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b> {delay_minutes/60} –º–∏–Ω."
        )
    
    async def send_daily_report(self, employee_id: int, stats_obj: EmployeeStats):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç EmployeeStats)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        if not await settings_manager.daily_reports_enabled():
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - –æ—Ç—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ EmployeeStats
        total_messages = stats_obj.total_messages
        responded_messages = stats_obj.responded_messages
        missed_messages = stats_obj.missed_messages
        avg_response_time = stats_obj.avg_response_time
        efficiency_percent = stats_obj.efficiency_percent
        response_rate = stats_obj.response_rate
        unique_clients = stats_obj.unique_clients
        exceeded_15_min = stats_obj.exceeded_15_min
        exceeded_30_min = stats_obj.exceeded_30_min
        exceeded_60_min = stats_obj.exceeded_60_min
        deleted_messages = stats_obj.deleted_messages

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {responded_messages}\n"
        text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missed_messages}\n"
        
        if deleted_messages > 0:
            text += f"üóë –£–¥–∞–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º–∏: {deleted_messages}\n"
        
        if avg_response_time is not None and responded_messages > 0: # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã
            text += f"\n‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.1f} –º–∏–Ω\n"
            
            if exceeded_15_min > 0 or exceeded_30_min > 0 or exceeded_60_min > 0:
                text += f"\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:\n"
                if exceeded_15_min > 0: text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 15 –º–∏–Ω: {exceeded_15_min}\n"
                if exceeded_30_min > 0: text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 30 –º–∏–Ω: {exceeded_30_min}\n"
                if exceeded_60_min > 0: text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 1 —á–∞—Å–∞: {exceeded_60_min}\n"
        elif responded_messages == 0:
            text += f"\n‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: - (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç—ã
        if missed_messages == 0 and responded_messages > 0 and (avg_response_time is None or avg_response_time < 15):
            text += "\nüåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        elif missed_messages > 0:
            text += f"\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
        
        if efficiency_percent:
            text += f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {round(efficiency_percent, 1)}%\n"
        
        if response_rate:
            text += f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {round(response_rate, 1)}%\n"
        
        if unique_clients:
            text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {unique_clients}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += "\nüí° <i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</i>"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
            async with AsyncSessionLocal() as session:
                result = await session.execute(
                    select(Employee).where(Employee.id == employee_id)
                )
                employee = result.scalar_one_or_none()
                
                if employee and employee.is_active:
                    await self.bot.send_message(
                        employee.telegram_id,
                        text,
                        parse_mode="HTML"
                    )
                    logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
                else:
                    logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")
    
    async def send_admin_report(self, admin_telegram_id: int, summary_stats: dict, individual_employee_stats: List[EmployeeStats]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        summary_stats: dict - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ get_dashboard_overview.
        individual_employee_stats: List[EmployeeStats] - —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.
        """
        if not await settings_manager.daily_reports_enabled():
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É {admin_telegram_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return
            
        text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</b>\n\n"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ summary_stats (—É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å—á–∏—Ç–∞–Ω—ã)
        text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary_stats.get('total_messages_today', 0)}\n"
        text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {summary_stats.get('responded_today', 0)}\n"
        text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {summary_stats.get('missed_today', 0)}\n"
        text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {summary_stats.get('unique_clients_today', 0)}\n"

        avg_response_time_admin = summary_stats.get('avg_response_time', 0)
        text += f"‚è± –°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: {avg_response_time_admin:.1f} –º–∏–Ω\n"
        text += f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {summary_stats.get('efficiency_today', 0):.1f}%\n" # –î–æ–±–∞–≤–ª–µ–Ω–æ

        text += "\n<b>–ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</b>\n"

        if not individual_employee_stats:
            text += "\n<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</i>"
        else:
            for stats_obj in individual_employee_stats: # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ EmployeeStats
                status_emoji = "‚úÖ" if stats_obj.is_active else "üí§"
                status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if stats_obj.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                    
                text += f"\n{status_emoji} {stats_obj.employee_name} ({status_text}):\n"
                text += f"  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats_obj.total_messages}\n"
                # –û—Ç–≤–µ—á–µ–Ω–æ —ç—Ç–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
                text += f"  ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ –∏–º: {stats_obj.responded_messages}\n" 
                text += f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–º: {stats_obj.missed_messages}\n"
                text += f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats_obj.unique_clients}\n"
                if stats_obj.avg_response_time is not None and stats_obj.responded_messages > 0:
                    text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤): {stats_obj.avg_response_time:.1f} –º–∏–Ω\n"
                elif stats_obj.responded_messages == 0:
                    text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤): - (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤)\n"

        try:
            await self.bot.send_message(
                admin_telegram_id,
                text,
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_telegram_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_telegram_id}: {e}")

    async def get_next_9am_moscow_utc(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime —Å–ª–µ–¥—É—é—â–µ–≥–æ 9:00 –ø–æ –ú–°–ö –≤ UTC"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        moscow_now = datetime.now(moscow_tz)

        # –°–æ–∑–¥–∞–µ–º 9:00 —Å–µ–≥–æ–¥–Ω—è
        today_9am = moscow_now.replace(hour=9, minute=0, second=0, microsecond=0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ 9:00
        if moscow_now < today_9am:
            next_9am_moscow = today_9am
        else:
            next_9am_moscow = today_9am + timedelta(days=1)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
        next_9am_utc = next_9am_moscow.astimezone(pytz.UTC).replace(tzinfo=None)
        return next_9am_utc