from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from database.database import AsyncSessionLocal
from database.models import Employee, Message as DBMessage
from .scheduler import setup_scheduler


def register_handlers(dp: Dispatcher, message_tracker):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(Command("help"))
    async def help_command(message: Message):
        """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
        if message.chat.type != "private":
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.telegram_id == message.from_user.id)
            )
            employee = result.scalar_one_or_none()
            
            is_admin = employee and employee.is_admin if employee else False
        
        help_text = """
ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –≤—Ö–æ–¥ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å
/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–ª–≥–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏

<b>–í–µ–±-–ø–∞–Ω–µ–ª—å:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Ö–æ–¥

‚ö†Ô∏è <i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!</i>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if is_admin:
            help_text += """
<b>üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
/admin_stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
/mark_deleted - –ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
        """
        
        await message.answer(help_text, parse_mode="HTML")
    
    @dp.message(Command("report_weekly"))
    async def weekly_report_command(message: Message):
        """–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
        if message.chat.type != "private":
            return
            
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.telegram_id == message.from_user.id)
            )
            employee = result.scalar_one_or_none()
            
            if not employee:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            stats = await message_tracker.analytics.get_employee_stats(employee.id, 'weekly')
            
            if stats:
                text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n"
                text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
                text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {stats.responded_messages}\n"
                text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.missed_messages}\n"
                
                if stats.responded_messages > 0:
                    text += f"\n‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats.avg_response_time:.1f} –º–∏–Ω\n"
                    text += f"\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 15 –º–∏–Ω: {stats.exceeded_15_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 30 –º–∏–Ω: {stats.exceeded_30_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 1 —á–∞—Å–∞: {stats.exceeded_60_min}"
                
                # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if stats.total_messages > 0:
                    efficiency = (stats.responded_messages / stats.total_messages) * 100
                    text += f"\n\nüìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%"
            else:
                text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            await message.answer(text, parse_mode="HTML")
    
    @dp.message(Command("report_monthly"))
    async def monthly_report_command(message: Message):
        """–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
        if message.chat.type != "private":
            return
            
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.telegram_id == message.from_user.id)
            )
            employee = result.scalar_one_or_none()
            
            if not employee:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            stats = await message_tracker.analytics.get_employee_stats(employee.id, 'monthly')
            
            if stats:
                text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:</b>\n\n"
                text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
                text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {stats.responded_messages}\n"
                text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.missed_messages}\n"
                
                if stats.responded_messages > 0:
                    text += f"\n‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats.avg_response_time:.1f} –º–∏–Ω\n"
                    text += f"\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 15 –º–∏–Ω: {stats.exceeded_15_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 30 –º–∏–Ω: {stats.exceeded_30_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 1 —á–∞—Å–∞: {stats.exceeded_60_min}"
                
                # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
                if stats.total_messages > 0:
                    efficiency = (stats.responded_messages / stats.total_messages) * 100
                    avg_daily = stats.total_messages / 30  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                    
                    text += f"\n\nüìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%"
                    text += f"\nüìÖ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {avg_daily:.1f} —Å–æ–æ–±—â–µ–Ω–∏–π"
            else:
                text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            await message.answer(text, parse_mode="HTML")
    
    @dp.message(Command("admin_stats"))
    async def admin_stats_command(message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
        if message.chat.type != "private":
            return
            
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(
                    Employee.telegram_id == message.from_user.id,
                    Employee.is_admin == True
                )
            )
            admin = result.scalar_one_or_none()
            
            if not admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employees_result = await session.execute(
                select(Employee).where(Employee.is_active == True)
            )
            employees = employees_result.scalars().all()
            
            text = "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
            
            total_messages = 0
            total_responded = 0
            total_missed = 0
            total_deleted = 0
            
            for employee in employees:
                stats = await message_tracker.analytics.get_employee_stats(employee.id, 'daily')
                
                if stats:
                    text += f"üë§ <b>{employee.full_name}</b>\n"
                    text += f"  üì® –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
                    text += f"  ‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {stats['responded_messages']}\n"
                    text += f"  ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['missed_messages']}\n"
                    
                    if stats.get('deleted_messages', 0) > 0:
                        text += f"  üóë –£–¥–∞–ª–µ–Ω–æ: {stats['deleted_messages']}\n"
                    
                    if stats['responded_messages'] > 0:
                        text += f"  ‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_response_time']:.1f} –º–∏–Ω\n"
                    
                    text += "\n"
                    
                    total_messages += stats['total_messages']
                    total_responded += stats['responded_messages']
                    total_missed += stats['missed_messages']
                    total_deleted += stats.get('deleted_messages', 0)
            
            text += f"\nüìä <b>–ò—Ç–æ–≥–æ:</b>\n"
            text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {total_responded}\n"
            text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total_missed}\n"
            
            if total_deleted > 0:
                text += f"üóë –£–¥–∞–ª–µ–Ω–æ: {total_deleted}\n"
            
            if total_messages > 0:
                overall_efficiency = ((total_responded + total_deleted) / total_messages) * 100
                text += f"üìà –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {overall_efficiency:.1f}%"
            
            await message.answer(text, parse_mode="HTML")
    
    @dp.message(Command("mark_deleted"))
    async def mark_deleted_command(message: Message):
        """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        if message.chat.type != "private":
            return
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(
                    Employee.telegram_id == message.from_user.id,
                    Employee.is_admin == True
                )
            )
            admin = result.scalar_one_or_none()
            if not admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            if len(args) < 2:
                await message.answer(
                    "‚ÑπÔ∏è <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                    "<code>/mark_deleted CHAT_ID MESSAGE_ID</code>\n\n"
                    "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                    "<code>/mark_deleted -1001234567890 123</code>\n\n"
                    "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
                    parse_mode="HTML"
                )
                return
            try:
                chat_id = int(args[0])
                msg_id = int(args[1])
            except ValueError:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. Chat ID –∏ Message ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
                return
            # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ø–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è
            result = await session.execute(
                select(DBMessage).where(
                    DBMessage.chat_id == chat_id,
                    DBMessage.message_id == msg_id
                )
            )
            db_messages = result.scalars().all()
            if not db_messages:
                await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
                return
            for db_msg in db_messages:
                await session.delete(db_msg)
            await session.commit()
            await message.answer(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –≤ —á–∞—Ç–µ {chat_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã.\n\n"
                "–û–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∏–≥–¥–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.",
                parse_mode="HTML"
            )


async def register_handlers_and_scheduler(dp: Dispatcher, message_tracker):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    # register_handlers(dp, message_tracker)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á (—Ç–µ–ø–µ—Ä—å async)
    scheduler = await setup_scheduler(message_tracker)
    return scheduler 