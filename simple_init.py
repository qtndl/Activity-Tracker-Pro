#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

import asyncio
import os
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from database.models import Base, Employee, SystemSettings
from sqlalchemy import select

# –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ pydantic
DATABASE_URL = "postgresql+asyncpg://bot:Hesoyam123@localhost:5432/activity_db"

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∏ —Å–µ—Å—Å–∏—é
engine = create_async_engine(DATABASE_URL, echo=True)
AsyncSessionLocal = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

async def create_admin():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        result = await session.execute(
            select(Employee).where(Employee.telegram_id == 410916774)
        )
        admin = result.scalar_one_or_none()
        
        if not admin:
            admin = Employee(
                telegram_id=410916774,  # –í–∞—à –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram ID
                telegram_username="kutin_dl",
                full_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                is_admin=True,
                is_active=True
            )
            session.add(admin)
            await session.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å Telegram ID: {admin.telegram_id}")
        else:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–µ–Ω
            admin.is_active = True
            await session.commit()
            print("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def create_default_settings():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    async with AsyncSessionLocal() as session:
        default_settings = [
            ("notification_delay_1", "15"),  # –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
            ("notification_delay_2", "30"),  # –í—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç  
            ("notification_delay_3", "60"),  # –¢—Ä–µ—Ç—å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç
            ("notifications_enabled", "true"),  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
            ("daily_reports_enabled", "true"),  # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã
            ("daily_reports_time", "18:00"),  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        ]
        
        for key, value in default_settings:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            result = await session.execute(
                select(SystemSettings).where(SystemSettings.key == key)
            )
            setting = result.scalar_one_or_none()
            
            if not setting:
                setting = SystemSettings(key=key, value=value)
                session.add(setting)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {key} = {value}")
            else:
                print(f"‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {setting.value}")
        
        await session.commit()

async def main():
    await init_database()
    await create_admin()
    await create_default_settings()
    print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main()) 